// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrderType int32

const (
	OrderType_ANY OrderType = 0
	OrderType_BID OrderType = 1
	OrderType_ASK OrderType = 2
)

var OrderType_name = map[int32]string{
	0: "ANY",
	1: "BID",
	2: "ASK",
}
var OrderType_value = map[string]int32{
	"ANY": 0,
	"BID": 1,
	"ASK": 2,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

// Geo represent GeoIP results for node
type Geo struct {
	Country string  `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	City    string  `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	Lat     float32 `protobuf:"fixed32,3,opt,name=lat" json:"lat,omitempty"`
	Lon     float32 `protobuf:"fixed32,4,opt,name=lon" json:"lon,omitempty"`
}

func (m *Geo) Reset()                    { *m = Geo{} }
func (m *Geo) String() string            { return proto.CompactTextString(m) }
func (*Geo) ProtoMessage()               {}
func (*Geo) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *Geo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Geo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Geo) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Geo) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Resources struct {
	// CPU core count
	CpuCores uint64 `protobuf:"varint,1,opt,name=cpuCores" json:"cpuCores,omitempty"`
	// RAM, in bytes
	RamBytes uint64 `protobuf:"varint,2,opt,name=ramBytes" json:"ramBytes,omitempty"`
	// GPU devices count
	GpuCount GPUCount `protobuf:"varint,3,opt,name=gpuCount,enum=sonm.GPUCount" json:"gpuCount,omitempty"`
	// todo: discuss
	// storage volume, in Megabytes
	Storage uint64 `protobuf:"varint,4,opt,name=storage" json:"storage,omitempty"`
	// Inbound network traffic (the higher value), in bytes
	NetTrafficIn uint64 `protobuf:"varint,5,opt,name=netTrafficIn" json:"netTrafficIn,omitempty"`
	// Outbound network traffic (the higher value), in bytes
	NetTrafficOut uint64 `protobuf:"varint,6,opt,name=netTrafficOut" json:"netTrafficOut,omitempty"`
	// Allowed network connections
	NetworkType NetworkType `protobuf:"varint,7,opt,name=networkType,enum=sonm.NetworkType" json:"networkType,omitempty"`
	// Other properties/benchmarks. The higher means better.
	Properties map[string]float64 `protobuf:"bytes,8,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *Resources) GetCpuCores() uint64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *Resources) GetRamBytes() uint64 {
	if m != nil {
		return m.RamBytes
	}
	return 0
}

func (m *Resources) GetGpuCount() GPUCount {
	if m != nil {
		return m.GpuCount
	}
	return GPUCount_NO_GPU
}

func (m *Resources) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *Resources) GetNetTrafficIn() uint64 {
	if m != nil {
		return m.NetTrafficIn
	}
	return 0
}

func (m *Resources) GetNetTrafficOut() uint64 {
	if m != nil {
		return m.NetTrafficOut
	}
	return 0
}

func (m *Resources) GetNetworkType() NetworkType {
	if m != nil {
		return m.NetworkType
	}
	return NetworkType_NO_NETWORK
}

func (m *Resources) GetProperties() map[string]float64 {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Slot struct {
	// Buyer’s rating. Got from Buyer’s profile for BID orders rating_supplier.
	BuyerRating int64 `protobuf:"varint,1,opt,name=buyerRating" json:"buyerRating,omitempty"`
	// Supplier’s rating. Got from Supplier’s profile for ASK orders.
	SupplierRating int64 `protobuf:"varint,2,opt,name=supplierRating" json:"supplierRating,omitempty"`
	// Geo represent Worker's position
	Geo *Geo `protobuf:"bytes,3,opt,name=geo" json:"geo,omitempty"`
	// Hardware resources requirements
	Resources *Resources `protobuf:"bytes,4,opt,name=resources" json:"resources,omitempty"`
	// Duration is resource rent duration in seconds
	Duration uint64 `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
}

func (m *Slot) Reset()                    { *m = Slot{} }
func (m *Slot) String() string            { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()               {}
func (*Slot) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *Slot) GetBuyerRating() int64 {
	if m != nil {
		return m.BuyerRating
	}
	return 0
}

func (m *Slot) GetSupplierRating() int64 {
	if m != nil {
		return m.SupplierRating
	}
	return 0
}

func (m *Slot) GetGeo() *Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Slot) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Slot) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Order struct {
	// Order ID, UUIDv4
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer's EtherumID
	ByuerID string `protobuf:"bytes,2,opt,name=byuerID" json:"byuerID,omitempty"`
	// Supplier's is EtherumID
	SupplierID string `protobuf:"bytes,3,opt,name=supplierID" json:"supplierID,omitempty"`
	// Order type (Bid or Ask)
	OrderType OrderType `protobuf:"varint,5,opt,name=orderType,enum=sonm.OrderType" json:"orderType,omitempty"`
	// Slot describe resource requiements
	Slot *Slot `protobuf:"bytes,6,opt,name=slot" json:"slot,omitempty"`
	// PricePerSecond specifies order price for ordered resources per second.
	PricePerSecond *BigInt `protobuf:"bytes,7,opt,name=pricePerSecond" json:"pricePerSecond,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetByuerID() string {
	if m != nil {
		return m.ByuerID
	}
	return ""
}

func (m *Order) GetSupplierID() string {
	if m != nil {
		return m.SupplierID
	}
	return ""
}

func (m *Order) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_ANY
}

func (m *Order) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *Order) GetPricePerSecond() *BigInt {
	if m != nil {
		return m.PricePerSecond
	}
	return nil
}

func init() {
	proto.RegisterType((*Geo)(nil), "sonm.Geo")
	proto.RegisterType((*Resources)(nil), "sonm.Resources")
	proto.RegisterType((*Slot)(nil), "sonm.Slot")
	proto.RegisterType((*Order)(nil), "sonm.Order")
	proto.RegisterEnum("sonm.OrderType", OrderType_name, OrderType_value)
}

func init() { proto.RegisterFile("order.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0xab, 0x3f, 0x4e, 0xa2, 0x51, 0x6a, 0xbb, 0x4b, 0x0f, 0xc2, 0x85, 0xd4, 0x98, 0x12,
	0x4c, 0xa0, 0x3e, 0x28, 0x3d, 0x94, 0x42, 0x29, 0x75, 0x5d, 0x82, 0x29, 0xc4, 0x66, 0x9d, 0x52,
	0x7a, 0x94, 0xe5, 0x89, 0x58, 0xe2, 0xec, 0x8a, 0xd5, 0xaa, 0x45, 0x6f, 0xd0, 0x47, 0xea, 0x93,
	0xf4, 0x79, 0xca, 0x8e, 0x2c, 0xd9, 0xf1, 0x6d, 0xe7, 0x37, 0xdf, 0xb2, 0x33, 0xf3, 0xcd, 0x42,
	0xa8, 0xf4, 0x06, 0xf5, 0x24, 0xd7, 0xca, 0x28, 0xe6, 0x17, 0x4a, 0x3e, 0x0e, 0xce, 0xd7, 0x22,
	0x13, 0xd2, 0xd4, 0x6c, 0xd0, 0x13, 0xd2, 0x52, 0x29, 0x92, 0x1a, 0x8c, 0x7e, 0x80, 0x77, 0x83,
	0x8a, 0x45, 0x70, 0x9a, 0xaa, 0x52, 0x1a, 0x5d, 0x45, 0xce, 0xd0, 0x19, 0x07, 0xbc, 0x09, 0x19,
	0x03, 0x3f, 0x15, 0xa6, 0x8a, 0x5c, 0xc2, 0x74, 0x66, 0x7d, 0xf0, 0xb6, 0x89, 0x89, 0xbc, 0xa1,
	0x33, 0x76, 0xb9, 0x3d, 0x12, 0x51, 0x32, 0xf2, 0x77, 0x44, 0xc9, 0xd1, 0x1f, 0x0f, 0x02, 0x8e,
	0x85, 0x2a, 0x75, 0x8a, 0x05, 0x1b, 0xc0, 0x59, 0x9a, 0x97, 0x5f, 0x94, 0xc6, 0x82, 0x1e, 0xf0,
	0x79, 0x1b, 0xdb, 0x9c, 0x4e, 0x1e, 0xa7, 0x95, 0xc1, 0x82, 0x5e, 0xf1, 0x79, 0x1b, 0xb3, 0x2b,
	0x38, 0xcb, 0xac, 0xae, 0x94, 0xf5, 0x73, 0xdd, 0xb8, 0x3b, 0xb1, 0x0d, 0x4c, 0x6e, 0x96, 0xdf,
	0x89, 0xf2, 0x36, 0x6f, 0x7b, 0x28, 0x8c, 0xd2, 0x49, 0x86, 0x54, 0x87, 0xcf, 0x9b, 0x90, 0x8d,
	0xe0, 0x5c, 0xa2, 0xb9, 0xd3, 0xc9, 0xfd, 0xbd, 0x48, 0xe7, 0x32, 0xea, 0x50, 0xfa, 0x09, 0x63,
	0x6f, 0xe0, 0xf9, 0x3e, 0x5e, 0x94, 0x26, 0x3a, 0x21, 0xd1, 0x53, 0xc8, 0xae, 0x21, 0x94, 0x68,
	0x7e, 0x2b, 0xfd, 0x70, 0x57, 0xe5, 0x18, 0x9d, 0x52, 0x49, 0x2f, 0xea, 0x92, 0x6e, 0xf7, 0x09,
	0x7e, 0xa8, 0x62, 0x9f, 0x00, 0x72, 0xad, 0x72, 0xd4, 0x46, 0x60, 0x11, 0x9d, 0x0d, 0xbd, 0x71,
	0x18, 0xbf, 0xae, 0xef, 0xb4, 0x13, 0x9a, 0x2c, 0x5b, 0xc5, 0x57, 0x3b, 0x77, 0x7e, 0x70, 0x65,
	0xf0, 0x11, 0x7a, 0x47, 0x69, 0x3b, 0xf0, 0x07, 0x6c, 0xcc, 0xb2, 0x47, 0xf6, 0x12, 0x3a, 0xbf,
	0x92, 0x6d, 0x89, 0x34, 0x43, 0x87, 0xd7, 0xc1, 0x07, 0xf7, 0xbd, 0x33, 0xfa, 0xeb, 0x80, 0xbf,
	0xda, 0x2a, 0xc3, 0x86, 0x10, 0xae, 0xcb, 0x0a, 0x35, 0x4f, 0x8c, 0x90, 0x19, 0x5d, 0xf6, 0xf8,
	0x21, 0x62, 0x97, 0xd0, 0x2d, 0xca, 0x3c, 0xdf, 0x8a, 0x56, 0xe4, 0x92, 0xe8, 0x88, 0xb2, 0x57,
	0xe0, 0x65, 0xa8, 0xc8, 0x92, 0x30, 0x0e, 0x76, 0x96, 0xa0, 0xe2, 0x96, 0xb2, 0xb7, 0x10, 0xe8,
	0xa6, 0x2f, 0xb2, 0x22, 0x8c, 0x7b, 0x47, 0xed, 0xf2, 0xbd, 0xc2, 0xfa, 0xbf, 0x29, 0x75, 0x62,
	0x84, 0x6a, 0x9c, 0x69, 0xe3, 0xd1, 0x3f, 0x07, 0x3a, 0x0b, 0xbb, 0xd3, 0xac, 0x0b, 0xae, 0xd8,
	0xec, 0xfa, 0x75, 0xc5, 0xc6, 0xba, 0xbd, 0xae, 0x4a, 0xd4, 0xf3, 0xd9, 0x6e, 0x35, 0x9b, 0x90,
	0x5d, 0x00, 0x34, 0xd5, 0xce, 0x67, 0x54, 0x62, 0xc0, 0x0f, 0x88, 0x2d, 0x8f, 0xbe, 0x09, 0x39,
	0xd8, 0x21, 0x07, 0x77, 0xe5, 0x2d, 0x1a, 0xcc, 0xf7, 0x0a, 0x76, 0x01, 0x7e, 0xb1, 0x55, 0xf5,
	0x3e, 0x84, 0x31, 0xd4, 0x4a, 0x3b, 0x4e, 0x4e, 0x9c, 0xbd, 0x83, 0x6e, 0xae, 0x45, 0x8a, 0x4b,
	0xd4, 0x2b, 0x4c, 0x95, 0xdc, 0xd0, 0x56, 0x84, 0xf1, 0x79, 0xad, 0x9c, 0x8a, 0x6c, 0x2e, 0x0d,
	0x3f, 0xd2, 0x5c, 0x5d, 0x42, 0xd0, 0xbe, 0xc6, 0x4e, 0xc1, 0xfb, 0x7c, 0xfb, 0xb3, 0xff, 0xcc,
	0x1e, 0xa6, 0xf3, 0x59, 0xdf, 0x21, 0xb2, 0xfa, 0xd6, 0x77, 0xd7, 0x27, 0xf4, 0x4d, 0xaf, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x83, 0xdb, 0x1c, 0x8a, 0xda, 0x03, 0x00, 0x00,
}
